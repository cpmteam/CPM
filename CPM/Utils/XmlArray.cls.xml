<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="CPM.Utils.XmlArray">
<IncludeCode>CPM.License,CPM.DataTypes</IncludeCode>
<Super>%SerialObject</Super>
<TimeCreated>63585,47373.132452</TimeCreated>

<Property name="xmlReader">
<Type>%XML.TextReader</Type>
</Property>

<Property name="fileName">
<Type>%String</Type>
</Property>

<Method name="%OpenFile">
<Description>
"object factory" method</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>fileName:%String</FormalSpec>
<ReturnType>CPM.Utils.XmlArray</ReturnType>
<Implementation><![CDATA[
    #; not try to actually open file
    quit:'##class(%File).Exists(fileName) $$$NULLOREF
    #dim o As CPM.Utils.XmlArray = ..%New()
    if '$$$ISOK(o.Open(fileName)) {
        quit $$$NULLOREF
    }
    quit o
]]></Implementation>
</Method>

<Method name="Open">
<FormalSpec>fileName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim sc As %Status = $$$OK
    set ..fileName = fileName
    quit ##class(%File).Exists(..fileName)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
    <Manifest>
    <Package Name="CPM-Installer-Sample" Version = "0.5.0" 
         License="MIT" Path="https://github.com/intersystems/monlbl-viewer.git" />
    <Dependencies>
    <Dependency Name="async" Version=">= 0.2.10"/>
    <Dependency Name="language-cos" Path="https://github.com/UGroup/atom-language-cos.git"/>
    </Dependencies>
    </Manifest>

 get loaded as local array
    
    %xmltree("Manifest")=2
    %xmltree("Manifest",1,"Package","License")="MIT"
    %xmltree("Manifest",1,"Package","Name")="CPM-Installer-Sample"
    %xmltree("Manifest",1,"Package","Path")="https://github.com/intersystems/monlbl-viewer.git"
    %xmltree("Manifest",1,"Package","Version")="0.5.0"
    %xmltree("Manifest",2,"Dependencies")=2
    %xmltree("Manifest",2,"Dependencies",1,"Dependency","Name")="async"
    %xmltree("Manifest",2,"Dependencies",1,"Dependency","Version")=">= 0.2.10"
    %xmltree("Manifest",2,"Dependencies",2,"Dependency","Name")="language-cos"
    %xmltree("Manifest",2,"Dependencies",2,"Dependency","Path")="https://github.com/UGroup/atom-language-cos.git"
*/
]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// #; Load metainfo from given XML file into "local name"

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// #; this name could be local, process private or global name

]]></Content>
</UDLText>

<Method name="ParseXml">
<FormalSpec>TargetArrayName:%String</FormalSpec>
<Implementation><![CDATA[
    #dim xreader As %XML.TextReader
    do ##class(%XML.TextReader).ParseFile(..fileName,.xreader)
    set ..xmlReader = xreader
    quit:'$isobject(..xmlReader)

    #dim modeStack As %ArrayOfDataTypes
    #dim arrayMode As %Boolean
    $$$INITSTACK(modeStack)

    while ..xmlReader.Read() {
        // opening tag e.g. <Package>
        if ..xmlReader.NodeType = "element" {
            // push tag
            set arrayMode =  $$$TOPSTACK(modeStack)
            if (arrayMode) {
                set TargetArrayName = $name(@TargetArrayName@($increment(@TargetArrayName),..xmlReader.Name))
            } else {
                set TargetArrayName = $name(@TargetArrayName@(..xmlReader.Name))
            }
            // we are switching to "array mode" if there is no
            // single attribute in the current tag 
            set arrayMode = '(..xmlReader.AttributeCount > 0)
            $$$PUSHVALUE(modeStack,arrayMode)
            if arrayMode {
                set @TargetArrayName = 0
            }
        }
        // closing tag e.g. </Package>
        elseif ..xmlReader.NodeType = "endelement" {
            // pop last tag
            // FIXME -make sure that the last popped subscript is the same as in ..xmlReader.Name
            $$$POPVALUE(modeStack)
            set arrayMode =  $$$TOPSTACK(modeStack)
            set TargetArrayName = $name(@TargetArrayName,$qlength(TargetArrayName) - (arrayMode + 1))
        }
        // xml tag attributes e.g. <Package Name="CPM-Installer-Sample" Version = "0.5.0" />
        for i=1:1:..xmlReader.AttributeCount {
            do ..xmlReader.MoveToAttributeIndex(i)
            set @TargetArrayName@(..xmlReader.Name) = ..xmlReader.Value
        }
    }
    //zw @TargetArrayName
]]></Implementation>
</Method>

<Method name="ArrayFromXml">
<ClassMethod>1</ClassMethod>
<FormalSpec>fileName:%String,LocalName:%String</FormalSpec>
<Implementation><![CDATA[
    #dim o As CPM.Utils.XmlArray = ..%OpenFile(fileName)
    do o.ParseXml(LocalName)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>XmlArrayState</State>
<StreamLocation>^CPM.Utils.XmlArrayS</StreamLocation>
<Data name="XmlArrayState">
<Value name="1">
<Value>xmlReader</Value>
</Value>
<Value name="2">
<Value>fileName</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
