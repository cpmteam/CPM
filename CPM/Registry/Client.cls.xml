<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="CPM.Registry.Client">
<Description>
Client for API of registry</Description>
<IncludeCode>CPM.LIB</IncludeCode>
<Super>%RegisteredObject</Super>
<TimeCreated>63576,304.901891</TimeCreated>

<Property name="Cache">
<Type>CPM.Registry.Cache</Type>
<ReadOnly>1</ReadOnly>
</Property>

<Method name="%OnNew">
<FormalSpec>Config</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set i%Cache=##class(CPM.Registry.Cache).%New(Config, ##this)
    quit $$$OK
]]></Implementation>
</Method>

<Method name="GetCertificate">
<Description>
Get SSL Configuration by Server as a name for configuration</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Server:%String</FormalSpec>
<Implementation><![CDATA[
    new $namespace
    zn "%SYS"
    do {
        quit:##class(Security.SSLConfigs).Exists(Server)
        
        set tSC=##class(Security.SSLConfigs).Create(Server)
        $$$ThrowOnError(tSC)
    } while 0
    quit Server
]]></Implementation>
</Method>

<Method name="Request">
<Internal>1</Internal>
<FormalSpec><![CDATA[Url:%String,&Params]]></FormalSpec>
<Implementation><![CDATA[
    set method=$$$GetParam(Params,"method","GET")
    $$$UrlParser(Url,url)
    
    set request=##class(%Net.HttpRequest).%New()
    set request.ContentType="application/json"
    set request.AcceptGzip=1
    set request.Timeout=$$$GetParam(Params,"timeout",30)
    
    set request.Server=url("host")
    set:$get(url("port"))'="" request.Port=port
    if url("scheme")="https" {
        set request.Https=1
        set request.SSLConfiguration=..GetCertificate(request.Server)
    }
    if $data(Params("body")) {
        
    }
    
    s tSC=request.Send(method, $$$GetParam(url,"path","/")_"?"_$$$GetParam(url,"query",""))
    $$$ThrowOnError(tSC)
    
    set statusCode=request.HttpResponse.StatusCode
    throw:statusCode=404 ##class(%Exception.General).%New("File not found error: "_statusCode)
    throw:statusCode>=400 ##class(%Exception.General).%New("Server error: "_statusCode)
    
    quit request.HttpResponse
    
    set data=request.HttpResponse.Data
    set data=data.Read(data.Size)
    set tSC=##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(data,,.parsed)
    $$$ThrowOnError(tSC)
    
    quit parsed
]]></Implementation>
</Method>

<Method name="Get">
<FormalSpec><![CDATA[Url:%String="",&Params]]></FormalSpec>
<Implementation><![CDATA[
    $$$UrlParser(Url,url)
    throw:($data(url("scheme"),scheme)&&(scheme'?1"http".1"s")) ##class(%Exception.General).%New("registry url must be filled")
    
    quit ..Request(.Url, .Params)
]]></Implementation>
</Method>
</Class>
</Export>
