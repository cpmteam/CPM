<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="CPM.Registry.Cache">
<IncludeCode>CPM.LIB</IncludeCode>
<Super>%RegisteredObject</Super>
<TimeCreated>63576,52166.039005</TimeCreated>

<Property name="Config">
<Type>CPM.LIB.Config</Type>
<Private>1</Private>
</Property>

<Property name="Registry">
<Type>CPM.Registry.Client</Type>
<Private>1</Private>
</Property>

<Property name="LatestUploaded">
<Type>%String</Type>
</Property>

<Method name="%OnNew">
<FormalSpec>Config,Registry</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set ..Config=$select($data(Config):Config, 1:##class(CPM.LIB.Config).%New())
    set ..Registry=$select($data(Registry):Registry, 1:##class(CPM.Registry.Cache).%New(..Config, ##this))
    quit $$$OK
]]></Implementation>
</Method>

<Method name="Update">
<Description>
FIXME - implement proper caching [all/since]</Description>
<FormalSpec>force:%Boolean=1</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set Url=..Config.registry
    $$$UrlParser(Url,url)

    if 'force && (.."_updated"'="") {
        quit:..GetTime()-.."_updated"<60000 $$$OK
        
        set url("query") = "stale=update_after&startkey="_.."_updated"
        set url("path")  = $$$GetParam(url, "path", "/-/all/since")
        write "Updating index",!
    } else {
        set url("path")  = $$$GetParam(url, "path", "/-/all/")
        write "Building the local index for the first time",!
    }
    #dim exception As %Exception.AbstractException
    try {
        set response=..Registry.Get(.url,.params)
    } catch exception {
        if exception.Code=$$$HttpRequestConnect {
            write !,"Connection error!",!
        } else {
            throw exception
        }
    }
    quit:$data(exception) $$$OK
    
    #dim data As %ZEN.proxyObject
#if 0
    set tSC=##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(response.Data,..%ClassName(1),.data,1)
#else
    zw response
    do response.Data.OutputToDevice()
    set tSC=##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(response.Data,,.data)
#endif
    $$$ThrowOnError(tSC)
    
    quit $$$OK
]]></Implementation>
</Method>

<Method name="GetTime">
<Description>
Get time in Unix format</Description>
<FormalSpec>TimeStamp=$zts</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit ($piece(TimeStamp,",")-47117)*86400 + $piece(TimeStamp,",",2) * 1000
]]></Implementation>
</Method>

<Method name="%DispatchGetProperty">
<Description>
Is used to get the value of an unknown property.</Description>
<FormalSpec>Property:%String</FormalSpec>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
    if $e(Property)="_" {
        quit:Property="_updated" ..Config.updated
        quit:Property="_latest" $get(i%latest)
    } else {
        quit:##class(CPM.Registry.Package).%ExistsId(Property) ##class(CPM.Registry.Package).%OpenId(Property)
    }
    quit ""
]]></Implementation>
</Method>

<Method name="%DispatchSetProperty">
<Description>
is used to set the value of an unknown property.</Description>
<FormalSpec>Property:%String,Val</FormalSpec>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
    if $e(Property)="_" {
        if Property="_updated" {
            set ..Config.updated=Val
        }
    } else {
        set tSC=##class(CPM.Registry.Package).Load(Property, Val)
        set ..LatestUploaded=Property
        //$$$ThrowOnError(tSC)
    }
    quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
