<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="CPM.Registry.Package">
<IncludeCode>CPM.LIB</IncludeCode>
<Super>%Persistent,CPM.IPackage</Super>
<TimeCreated>63577,86035.524325</TimeCreated>

<Index name="byName">
<IdKey>1</IdKey>
<Properties>name</Properties>
</Index>

<Property name="Modified">
<Type>%TimeStamp</Type>
</Property>

<Index name="byKeywords">
<Properties>keywords(ELEMENTS)</Properties>
</Index>

<Index name="byMaintainers">
<Properties>maintainers(ELEMENTS)</Properties>
</Index>

<Method name="%OnNew">
<FormalSpec>initvalue:CPM.IPackage</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    if $data(initvalue) && $isobject(initvalue) {
        set ..author = initvalue.author
        set ..name = initvalue.name
        set ..path  = initvalue.path
        set ..version  = initvalue.version
        set ..license  = initvalue.license
        set ..description  = initvalue.description

        set ..dependencies = initvalue.dependencies
        set ..keywords = initvalue.keywords
        set ..maintainers = initvalue.maintainers
        set ..items = initvalue.items
        set ..DirectoryPath = initvalue.DirectoryPathGet()
    }
    quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnBeforeSave">
<FormalSpec>insert:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    // FIXME: bad, bad me - we should not modify state of the object upon saving!
    set ..Modified = $ZDT($ZTS,3,,3)


    quit $$$OK
]]></Implementation>
</Method>

<Method name="UsePackageJsonProps">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim status As %Status = '$$$OK
    #dim metaInfo ; multi-dimentional array

    #dim jsonText As %String = $get($$$CpmLastPkgJson)
    $$$CPMCOMPILELOG(jsonText)

    if jsonText'="" {
        if '##class($$$JsonProvider).%ConvertJSONToObject(jsonText,,.metaInfo) {
            quit status
        }
        set status = $$$OK
#if 0 
    #define SetProp(%prop,%from)   ##continue
        if 'm%%prop {            ##continue
            set ..%prop = %from.%prop       ##continue
        }
        $$$SetProp(name,metaInfo)
        $$$SetProp(description,metaInfo)
        $$$SetProp(version,metaInfo)
        $$$SetProp(author,metaInfo)
        $$$SetProp(path,metaInfo)
        $$$SetProp(license,metaInfo)
#else
    #define SetProp(%prop,%from)  set ..%prop = %from.%prop
        write !,"Changing package properties to package.json values: ",!
        write ?8,..name, " => ", metaInfo.name, !
        write ?8,..version, " => ", metaInfo.version, !
        $$$SetProp(name,metaInfo) ; FIXME! Uh-oh, forcefully change name of a package. Which is primary idkey...
        $$$SetProp(description,metaInfo)
        $$$SetProp(version,metaInfo)
        $$$SetProp(author,metaInfo)
        $$$SetProp(path,metaInfo)
        $$$SetProp(license,metaInfo)
#endif
    }
    quit status
]]></Implementation>
</Method>

<Method name="CreateOrOpenId">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>CPM.Registry.Package</ReturnType>
<Implementation><![CDATA[
    if ..%ExistsId(id) {
        set o = ..%OpenId(id)
    } else {
        set o = ..%New()
        set o.Name = id
    }
    // clean temporary package.json store, if any
    kill $$$CpmLastPkgJson

    quit o
]]></Implementation>
</Method>

<Method name="Load">
<ClassMethod>1</ClassMethod>
<FormalSpec>Package,Value:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim package As CPM.Registry.Package = ..%OpenId(Package)
    set:'$isobject(package) package=..%New()
    set package.name        = Package
    set package.description = Value.description
    
    do package.keywords.Clear()
    for i=1:1:Value.keywords.Size {
        do package.keywords.Insert(Value.keywords.GetAt(i))
    }
    do package.maintainers.Clear()
    if Value.maintainers.%IsA("%ListOfObjects") {
        for i=1:1:Value.maintainers.Size {
            do package.maintainers.Insert(Value.maintainers.GetAt(i).name)
        }
    }
    set package.author   = $select($isobject(Value.author):Value.author.name, 1:"")
    set package.modified = $tr(Value.time.modified,"TZ"," ")
    do Value.versions.%CopyToArray(.versions)
    set tVersion=""
    for {
        set tVersion = $order(versions(tVersion),1,latest)
        quit:tVersion=""
        continue:latest'="latest"
        set package.version = tVersion
    }
    quit package.%Save()
]]></Implementation>
</Method>

<Method name="Export">
<Description>
common method for exporting package to the staging area
regardless of a format it should generate package.json pointing to the 
appropriate container</Description>
<FormalSpec>verbose:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim status As %Status = $$$OK
    #dim DirectoryName As %String = $$$UtilMakePath($$$CpmConfig.tempdir,..name)
    do ##class(%Library.File).CreateDirectoryChain(DirectoryName)
    write !, "Exporting package files to: ", DirectoryName, !
    do ##class(%Library.File).ComplexDelete(DirectoryName_"/*.*")
    write "Deleted all files in the directory:",!
    
    #dim fileName As %String = $$$UtilMakePath(DirectoryName,"package.json")
    // 1. export/generate metainfo
    #dim containerName As %String = ..path
    if containerName="" {
        set containerName = ..name_".xml"
    }
    set ..path = containerName
    do ..ExportJSON(fileName, $this) // FIXME - attribute case
    // 2. export container
    // FIXME - at the moment exporting only using XML
    set fileName = $$$UtilMakePath(DirectoryName,containerName)
    #dim listItems = $lts(..items.Serialize(),",")
    do $system.OBJ.Export(listItems,fileName)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// TODO - 

]]></Content>
</UDLText>

<Method name="NextTempNamespace">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA["CPM-D1"
]]></Implementation>
</Method>

<Method name="LoadTemporarilyToNS">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[TempName:%String,TempDir:%String,&ListOfFiles,dryRun:%Boolean=0]]></FormalSpec>
<Implementation><![CDATA[
	new $namespace
	zn "%sys"
	set installer = ##class(%Installer.Installer).%New()
	do installer.CreateDatabase(TempName, TempName, "overwrite") ; Name, [Subdir] Name
	do installer.CreateNamespace(TempName, TempName, TempName) ; Namespace, Code DB, Data DB
	
	; code
	; ..AddDirectoryItems will be appropriate
	; but object will become useless the next moment we leave namespace..
	; so do the old-school way
	#dim flags As %String = $select(dryRun:"-d",1:"ck")
    do $system.OBJ.ImportDir(TempDir,,flags,,1,.ListOfFiles)
	
	if ##class(Config.Namespaces).Exists(TempName) {
		set sc = ##class(Config.Namespaces).Delete(TempName)
		set sc = $$DeleteDatabase^%SYS.DATABASE(TempName)
	}
]]></Implementation>
</Method>

<Method name="CreateTempDir">
<ClassMethod>1</ClassMethod>
<FormalSpec>author:%String,name:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim tempDirectory As %String = $$$UtilConcatPath($$$CpmConfig.tempdir, ".github")
	set tempDirectory = $$$UtilConcatPath($$$UtilConcatPath(tempDirectory, author), name)
	if tempDirectory = "" {
		write !, "Failed to calculate temporary directory",!!
		quit '$$$OK
	}
	write "Creating temp directory: ", tempDirectory,!
	do ##class(%Library.File).CreateDirectoryChain(tempDirectory)
	quit tempDirectory
]]></Implementation>
</Method>

<Method name="DownloadUrl">
<ClassMethod>1</ClassMethod>
<FormalSpec>url:%String,tempName:%String</FormalSpec>
<Implementation><![CDATA[
	#dim archive = ##class(%Stream.FileBinary).%New()
	set archive.Filename = tempName
	#dim zipball As %Net.HttpResponse = $$$CpmRegistry.Get(url)
	do archive.CopyFromAndSave(zipball.Data)
]]></Implementation>
</Method>

<Parameter name="ARCHIVER">
<Type>%String</Type>
<Default>"C:\Program Files\7-Zip\7z.exe"</Default>
</Parameter>

<Method name="NotFound">
<Description>
not found the asked url (license, readme, etc.)</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>o:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA['$isobject(o) || (o.message = "Not Found")
]]></Implementation>
</Method>

<Method name="ImportFromObject">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>repoName:%String,dryRun:%Boolean=0,repo:%ZEN.proxyObject,license:%ZEN.proxyObject,readme:%ZEN.proxyObject,release:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim name As %String = repo.name
    #dim avatar As %String = repo.owner."avatar_url"
	#dim author As %String = repo.owner.login
	#dim authorUrl As %String = repo."html_url"
    #dim description As %String = repo.description
    #dim gitHubUrl As %String = repo."html_url"
    #dim haswiki As %String = repo."has_wiki"
	#dim subCount As %String = repo."subscribers_count"
    #dim hasDownloads As %Boolean = repo."has_downloads"
    #dim forksCount As %Integer = repo."forks_count"
    #dim createionTime As %DateTime = repo."created_at"
    #dim modificationTime As %DateTime = repo."pushed_at"
    #dim version As %String = repo."tag_name"
    
	#dim package As CPM.Registry.Package = ..CreateOrOpenId(name)

    set package.name = name
    set package.avatar = avatar
    set package.description = description
   	set package.author = author
	set package.authorUrl = authorUrl
	set package.version = version
	set package.subscribersCount = subCount

	if '..NotFound(license) {
	    #dim licenseType As %String = license.license.key
	    #dim licenseName As %String = license.license.name
	}

	if '..NotFound(readme) {
	    #;dim readmeEncoding As %String = readme.encoding
	    #dim readmeContent As %String = readme.content
	    #dim readmeFilename As %String = readme.path
	    #;dim readmeUrl As %String = readme."html_url"
	    #dim readmeText As %String = $system.Encryption.Base64Decode(readmeContent)

	    set package.readmeFilename = readmeFilename
		set package.readmeText = readmeText
	}

	#dim tarUrl As %String
	
	if ..NotFound(release) {
		// Case #1 - no release yet, the normal source only package
		set tarUrl = repoName _ "/zipball/master/"
	} else {
	    #dim tag As %String = release."tag_name"
	    #dim tagName As %String = release.name
	    #dim tagTime As %DateTime = release."published_at"
	    #dim tarball As %String = release."tarball_url"
	    #dim zipball As %String = release."zipball_url"
	    #dim releaseComments As %String = release.body
	    set tarUrl = zipball
    	
    	set package."dist-tags" = tag
	}

	#dim tempDirectory As %String = ..CreateTempDir(author, name)
	#dim tempZip As %String = $$$UtilMakePath(tempDirectory, "test.zip")
	do ..DownloadUrl(tarUrl, tempZip)

	#dim tempOutDir As %String = $$$UtilConcatPath(tempDirectory, "out")
	write !, "Extracting package into: "_tempOutDir,!
	set x = $ZF(-1, ..#ARCHIVER_" x "_tempZip_" -o"_tempOutDir_" -y")
	if ##class(%Library.File).Exists(tempOutDir) {
		#dim list
		do ..LoadTemporarilyToNS(..NextTempNamespace(), tempOutDir, .list, dryRun)
		set itemName = ""
		for {
	    	set itemName = $order(list(itemName))
	    	quit:itemName=""
	    	write ?8,itemName,!
	    	do package.items.Insert(itemName)
		}
	}
	do ##class(%Library.File).RemoveDirectoryTree(tempDirectory)
	quit:'dryRun package.%Save()
	quit $$$OK
]]></Implementation>
</Method>

<Method name="ImportFromGitHub">
<ClassMethod>1</ClassMethod>
<FormalSpec>repoName:%String,dryRun:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim status As %Status = $$$OK
    
    #dim repo As %ZEN.proxyObject = ""
    $$$THROWONERROR(status, ##class(CPM.Registry.GitHubApi).GetRepoInfo(repoName, .repo))
    #dim license As %ZEN.proxyObject = ""
    $$$THROWONERROR(status, ##class(CPM.Registry.GitHubApi).GetLicense(repoName, .license))
    #dim readme As %ZEN.proxyObject = ""
    $$$THROWONERROR(status, ##class(CPM.Registry.GitHubApi).GetReadme(repoName, .readme))

    #dim releases As %ListOfObjects = ""
    $$$THROWONERROR(status, ##class(CPM.Registry.GitHubApi).GetReleases(repoName, .releases))
   #if 0
    #dim key As %String = ""
    do {
        #dim release As %ZEN.proxyObject = releases.GetNext(.key)
        if key="" { quit }
        ; zw release
    } while key'=""
   #endif
    #dim latestRelease As %ZEN.proxyObject = ""
    $$$THROWONERROR(status, ##class(CPM.Registry.GitHubApi).GetReleaseInfo(repoName, ,.latestRelease))

    quit ..ImportFromObject(repoName, dryRun, repo, license, readme, latestRelease)
]]></Implementation>
</Method>

<Method name="ImportAll">
<ClassMethod>1</ClassMethod>
<FormalSpec>orgName:%String,dryRun:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim max As %Numeric = 20 ; FIXME
	#dim githubApi As CPM.Registry.GitHubApi = ##class(CPM.Registry.GitHubApi).%New()
	#dim data As $$$JsonObject
	#dim sc As %Status = githubApi.GetRepos(orgName, .data)

	set urlName = ""
	for i=1:1:data.Count() {
		#dim repoObject = data.GetAt(i)
		#dim repoName = repoObject.name
		
		// skip private repositories
		if repoObject.private {
			continue 
		}
		// resolve forks
		if repoObject.fork {
			#dim repoDetailed 
			do githubApi.GetRepoInfo(orgName _"/"_ repoName, .repoDetailed)
			if repoDetailed.parent {
				; do repoDetailed.parent.%ToJSON()
				set urlName = repoDetailed."html_url"
			}
		} else {
			set urlName = repoObject."html_url"
		}
		&html<Name: #(repoName)#, 
		private: #(repoObject.private)#, fork: #(repoObject.fork)#, 
		html_url: #(repoObject."html_url")# >
		quit:urlName=""        
        write !, i,".", ?4, "Import from url: ", urlName,!
        do ..ImportFromGitHub(urlName, dryRun)
	}
	quit $$$OK
]]></Implementation>
</Method>

<Method name="AddDirectoryItems">
<Description>
xml load from files in subdirectories, automatically register all as 
package item</Description>
<FormalSpec>directoryName:%String,autoLoad:%Boolean=0</FormalSpec>
<Implementation><![CDATA[
    if ##class(%Library.File).Exists(directoryName) {
        #dim list
        do $system.OBJ.ImportDir(directoryName,,"ck",,1,.list)
        write !,"Adding these items to the package: ",..name, !

        #dim itemName As %String = ""
        for  {
            set itemName = $order(list(itemName))
            quit:itemName=""
            write ?8,itemName,!
            do ..items.Insert(itemName)
        }
    }
]]></Implementation>
</Method>

<Method name="RegisterPackageDefinition">
<ClassMethod>1</ClassMethod>
<FormalSpec>jsonText:%String</FormalSpec>
<Implementation><![CDATA[    set $$$CpmLastPkgJson = jsonText
]]></Implementation>
</Method>

<Method name="AddProjectItems">
<Description>
load items from gibven project, automatically register all as 
package item</Description>
<FormalSpec>prjName:%String</FormalSpec>
<Implementation><![CDATA[
    #dim prjBareName As %String = $piece(prjName,".",1,*-1)
    #dim prj As %Studio.Project = ##class(%Studio.Project).%OpenId(prjBareName)

    if $isobject(prj) {
        // remember all project items 
        for i=1:1:prj.Items.Count() {
            #dim item As %Studio.ProjectItem = prj.Items.GetAt(i)
            #dim itemName As %String = item.Name
            #dim itemType As %String = item.Type
            do ##class(%Studio.Project).NormalizeName(.itemName, .itemType)
            do ..items.Insert(itemName_"."_itemType)
        }
        // then remember project itself
        do ..items.Insert(prjName)
    }
]]></Implementation>
</Method>

<Method name="AddXmlItems">
<FormalSpec>xmlFile:%String,autoLoad:%Boolean=0</FormalSpec>
<Implementation><![CDATA[
    // FIXME - refactor to common function
    // FIXME - beware of copy-paste from CPM.Source.XML
    if ##class(%Library.File).Exists(xmlFile) {
        #dim list
        do $system.OBJ.Load(xmlFile,"-d",,.list,1)
        write !,"Adding these items to the package: ",..name, !

        #dim itemName As %String = ""
        for  {
            set itemName = $order(list(itemName))
            quit:itemName=""
            write ?8,itemName,!
            do ..items.Insert(itemName)
        }

        if autoLoad {
            do $system.OBJ.Load(xmlFile,"ck",.errorlog)
        }
    }
]]></Implementation>
</Method>

<Method name="ExportJSON">
<Description>
FIXME - at the moment we output attributes at the same case as properties written
but we need them in low case eventually</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>FileName:%String,o:%Library.RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set io = $io
    set file = FileName
    open file:"WNS":0 else  quit $$$ERROR($$$FileCanNotOpen,file)
    use file
    if $isobject(o) {
        Do ##class($$$JsonProvider).%ObjectToJSON(o,,,"aeloqtw") ; remove "c" modifier to avoid _class/_id generation
    }
    use io
    close file

    quit $$$OK
]]></Implementation>
</Method>

<Method name="%DispatchSetProperty">
<Description>
is used to set the value of an unknown property.</Description>
<FormalSpec>Property:%String,Val</FormalSpec>
<ServerOnly>1</ServerOnly>
</Method>

<Method name="%DispatchGetProperty">
<Description>
Is used to get the value of an unknown property.</Description>
<FormalSpec>Property:%String</FormalSpec>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[   quit ""
]]></Implementation>
</Method>

<Query name="Search">
<Type>%SQLQuery</Type>
<FormalSpec>Value:%String</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery>SELECT id from (
    SELECT id FROM package where UPPER(name) %INLIST UPPER(:Value)
    union all
    SELECT id FROM package where FOR SOME %ELEMENT(keywords) (%VALUE %INLIST(:Value))
    union all
    SELECT id FROM package where description %CONTAINSTERM(:Value)
    union all
    SELECT id FROM package where FOR SOME %ELEMENT(maintainers) (%VALUE %INLIST(:Value))
) GROUP BY id</SqlQuery>
</Query>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^CPM.Registry.PackageD</DataLocation>
<DefaultData>PackageDefaultData</DefaultData>
<IdLocation>^CPM.Registry.PackageD</IdLocation>
<IndexLocation>^CPM.Registry.PackageI</IndexLocation>
<StreamLocation>^CPM.Registry.PackageS</StreamLocation>
<Data name="PackageDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Modified</Value>
</Value>
<Value name="3">
<Value>dist-tags</Value>
</Value>
<Value name="4">
<Value>author</Value>
</Value>
<Value name="5">
<Value>path</Value>
</Value>
<Value name="6">
<Value>version</Value>
</Value>
<Value name="7">
<Value>license</Value>
</Value>
<Value name="8">
<Value>keywords</Value>
</Value>
<Value name="9">
<Value>description</Value>
</Value>
<Value name="10">
<Value>dependencies</Value>
</Value>
<Value name="11">
<Value>items</Value>
</Value>
<Value name="12">
<Value>maintainers</Value>
</Value>
<Value name="13">
<Value>readmeFilename</Value>
</Value>
<Value name="14">
<Value>readmeText</Value>
</Value>
<Value name="15">
<Value>DirectoryPath</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
