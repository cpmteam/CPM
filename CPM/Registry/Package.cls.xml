<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="CPM.Registry.Package">
<Super>%Persistent,CPM.IPackage</Super>
<TimeCreated>63577,86035.524325</TimeCreated>

<Index name="byName">
<IdKey>1</IdKey>
<Properties>Name</Properties>
</Index>

<Property name="Modified">
<Type>%TimeStamp</Type>
</Property>

<Index name="byKeywords">
<Properties>Keywords(ELEMENTS)</Properties>
</Index>

<Method name="%OnNew">
<FormalSpec>initvalue:CPM.IPackage</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    if $data(initvalue) && $isobject(initvalue) {
        set ..Author = initvalue.Author
        set ..Name = initvalue.Name
        set ..Path  = initvalue.Path
        set ..Version  = initvalue.Version
        set ..License  = initvalue.License
        set ..Description  = initvalue.Description

        set ..Dependencies = initvalue.Dependencies
        set ..Keywords = initvalue.Keywords
        set ..Maintainers = initvalue.Maintainers
        set ..Items = initvalue.Items
    }

    quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnBeforeSave">
<FormalSpec>insert:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    // FIXME: bad, bad me - we should not modify state of the object upon saving!
    set ..Modified = $ZDT($ZTS,3,,3)

    quit $$$OK
]]></Implementation>
</Method>

<Method name="CreateOrOpenId">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>CPM.Registry.Package</ReturnType>
<Implementation><![CDATA[
    if ..%ExistsId(id) {
        set o = ..%OpenId(id)
    } else {
        set o = ..%New()
        set o.Name = id
    }
    quit o
]]></Implementation>
</Method>

<Method name="Load">
<ClassMethod>1</ClassMethod>
<FormalSpec>Package,Value:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim package As CPM.Registry.Package = ..%OpenId(Package)
    set:'$isobject(package) package=..%New()
    set package.Name        = Package
    set package.Description = Value.description
    
    do package.Keywords.Clear()
    for i=1:1:Value.keywords.Size {
        do package.Keywords.Insert(Value.keywords.GetAt(i))
    }
    do package.Maintainers.Clear()
    if Value.maintainers.%IsA("%ListOfObjects") {
        for i=1:1:Value.maintainers.Size {
            do package.Maintainers.Insert(Value.maintainers.GetAt(i).name)
        }
    }
    set package.Author   = $select($isobject(Value.author):Value.author.name, 1:"")
    set package.Modified = $tr(Value.time.modified,"TZ"," ")
    do Value.versions.%CopyToArray(.versions)
    set tVersion=""
    for {
        set tVersion = $order(versions(tVersion),1,latest)
        quit:tVersion=""
        continue:latest'="latest"
        set package.Version = tVersion
    }
    quit package.%Save()
]]></Implementation>
</Method>

<Method name="%DispatchSetProperty">
<Description>
is used to set the value of an unknown property.</Description>
<FormalSpec>Property:%String,Val</FormalSpec>
<ServerOnly>1</ServerOnly>
</Method>

<Method name="%DispatchGetProperty">
<Description>
Is used to get the value of an unknown property.</Description>
<FormalSpec>Property:%String</FormalSpec>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[   quit ""
]]></Implementation>
</Method>

<Query name="Search">
<Type>%SQLQuery</Type>
<FormalSpec>Value:%String</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery>SELECT id from (
    SELECT id FROM package where name = :Value
    union all
    SELECT id FROM package where name like STRING('%',:Value,'%')
    union all
    SELECT id FROM package where keywords like STRING('%',:Value,'%')
    union all
    SELECT id FROM package where description like STRING('%',:Value,'%')
) GROUP BY id</SqlQuery>
</Query>

<Query name="ListByName">
<Type>%SQLQuery</Type>
<FormalSpec>Value:%String</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery>SELECT id FROM package where name like STRING('%',:Value,'%')</SqlQuery>
</Query>

<Query name="ListByKeyword">
<Type>%SQLQuery</Type>
<FormalSpec>Value:%String</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery>SELECT id FROM package where keywords like STRING('%',:Value,'%')</SqlQuery>
</Query>

<Query name="ListByDescription">
<Type>%SQLQuery</Type>
<FormalSpec>Value:%String</FormalSpec>
<SqlProc>1</SqlProc>
<SqlQuery>SELECT id FROM package where description like STRING('%',:Value,'%')</SqlQuery>
</Query>
</Class>
</Export>
