<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="CPM.Source.TarGz">
<IncludeCode>CPM.LIB</IncludeCode>
<Super>%RegisteredObject,CPM.Source.IBase</Super>
<TimeCreated>63578,9135.530254</TimeCreated>

<Parameter name="EXTENSIONS">
<Type>%String</Type>
<Default>TGZ,GZ</Default>
</Parameter>

<Parameter name="MANIFEST">
<Type>%String</Type>
<Default>package.json</Default>
</Parameter>

<Method name="IsPackedGet">
<Description>
override IsPacked property to be always returning 1</Description>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[    quit 1
]]></Implementation>
</Method>

<Method name="IsPackedSet">
<FormalSpec>Val:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #; simply ignore
    quit $$$OK
]]></Implementation>
</Method>

<Method name="Open">
<FormalSpec>fileName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #; not try to actually open file
    set ..FileName = fileName
    quit ##class(%File).Exists(..FileName)
]]></Implementation>
</Method>

<Method name="Unpack">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim tFileStream As %Stream.FileBinaryGzip = ##class(%Stream.FileBinaryGzip).%New()

    set tFileStream.Filename = ..FileName
    set ..PackageContent = ##class(CPM.Utils.FileBinaryTar).ExtractStreamToArray(tFileStream)
    kill tFileStream

    quit $isobject(i%PackageContent)
]]></Implementation>
</Method>

<Method name="Parse">
<ReturnType>CPM.IPackage</ReturnType>
<Implementation><![CDATA[
    if '$isobject(..PackageContent) {
        quit $$$NULLOREF
    }

    set ..PackageContent = ..PackageContent.GetNext()   // what the heck?
    // FIXME - typed declaration
    set metaInfo         = ..PackageContent.GetAt(..#MANIFEST)
    if '$isobject(metaInfo) {
        quit $$$NULLOREF
    }
    
    #dim metaInfoData As %Stream.FileBinary = metaInfo.fileData
    if '##class($$$JsonProvider).%ConvertJSONToObject(metaInfoData.Read(metaInfoData.Size),,
                                                     .metaInfo) 
    {
        quit $$$NULLOREF
    }
    #dim p As CPM.IPackage = ##class(CPM.IPackage).%New()
    set p.name          = metaInfo.name ; ##class(CPM.IPackage).NormalizeName(metaInfo.name)
    set p.description   = $zconvert(metaInfo.description,"I","UTF8")
    set p.version       = metaInfo.version
    set p.author        = metaInfo.author
    set p.path          = metaInfo.path
    set p.license       = metaInfo.license

    set p.dependencies  = metaInfo.dependencies
    set p.keywords      = metaInfo.keywords
    set p.maintainers   = metaInfo.maintainers
    set p.items         = metaInfo.items

    quit p
]]></Implementation>
</Method>

<Method name="Install">
<FormalSpec>dryrun:%Boolean,package:CPM.IPackage</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim status As %Status = $$$OK
    // TODO - FIXME - WHATTHEHECK - how to deal with tar.gz which has no package.json, or 
    // where `path = ` argument is not defined in manifest?
    // we should extract whole archive
    #dim fileStream AS %Stream.FileBinary = ..PackageContent.GetAt(package.path).fileData

    if $isobject(fileStream) {
        // FIXME - beware of extreme copy-paste from CPM.Source.Xml!

        // 1. load list of items in the container
        do $system.OBJ.LoadStream(fileStream,"-d",,.list,1)
        write !,"About to load these items from the package ", package.name,!
        #dim itemName As %String = ""
        for  {
            set itemName = $order(list(itemName))
            quit:itemName=""
            write ?8,itemName,!
        }
        if 'dryrun {
            do $system.OBJ.LoadStream(fileStream,"ck",.errorlog,.list)
            set itemName = "" for {
                set itemName = $order(list(itemName))
                quit:itemName=""
                do package.items.Insert(itemName)
            }
            // TODO - check errorlog
            
            // 4.0. check whether there is same name duplicate
            #dim storedPackage As CPM.Registry.Package
            if ##class(CPM.Registry.Package).%ExistsId(package.name) {
                // TODO - later we need to be more vocal, at the moment - just overwrite
                //        it sliently
                set storedPackage = ##class(CPM.Registry.Package).%OpenId(package.name)
                do storedPackage.%OnNew(package)
            } else {
                set storedPackage = ##class(CPM.Registry.Package).%New(package)
            }

            // 4. save package instance to the registry
            set status = storedPackage.%Save()
        }
    } else {
        set status = '$$$OK
    }
    quit status
]]></Implementation>
</Method>
</Class>
</Export>
