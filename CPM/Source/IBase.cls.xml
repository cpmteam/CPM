<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="CPM.Source.IBase">
<IncludeCode>%occConstant,CPM.SourceTypes,CPM.LIB</IncludeCode>
<Super>%Library.RegisteredObject</Super>
<TimeCreated>63577,81983.079145</TimeCreated>

<Parameter name="EXTENSIONS">
<Description>
will be overriden in the successor</Description>
<Type>%String</Type>
</Parameter>

<Parameter name="MANIFEST">
<Description>
will be overriden in the successor</Description>
<Type>%String</Type>
</Parameter>

<Property name="FileName">
<Type>%String</Type>
</Property>

<Property name="IsPacked">
<Type>%Boolean</Type>
<Calculated>1</Calculated>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="PackageContent">
<Type>%ArrayOfDataTypes</Type>
</Property>

<Method name="UnregisterExts">
<Description>
 cleanup process private variables used for .ext and manifest registration</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    kill $$$PpvExtensions
    kill $$$PpvManifests
]]></Implementation>
</Method>

<Method name="RegisterExts">
<Description>
register class extension and manifest name</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Args...</FormalSpec>
<Implementation><![CDATA[
    #dim ext As %String
    // 1. register package extensions
    for i=1:1:$length(..#EXTENSIONS, ",") {
        set ext = $piece(..#EXTENSIONS, ",", i)
        set $$$PpvExtensions(ext) = $CLASSNAME($this)
    }

    // 2. register manifest names
    for i=1:1:$length(..#MANIFEST, ",") {
        set ext = $piece(..#MANIFEST, ",", i)
        set $$$PpvManifests(ext) = $CLASSNAME($this)
    }
]]></Implementation>
</Method>

<Method name="%OpenContainer">
<Description>
open "container" file generically (depending on the extension
given different handler class will be called)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>fileName:%String</FormalSpec>
<ReturnType>CPM.Source.IBase</ReturnType>
<Implementation><![CDATA[
    #dim ext As %String = $zcvt($piece(fileName,".",*), "U")
    #dim o As CPM.SourceType.IBase = $$$NULLOREF
    #dim packageName As %String = fileName
    
    if ##class(%File).Exists(fileName) {
        if $d($$$PpvExtensions(ext)) {
            set o = $classmethod($$$PpvExtensions(ext), "%New")
            if $isobject(o) {
                do o.Open(fileName)
            }
        }
    } else {
        #dim package As %CPM.Registry.Package
        #dim url As %String = ""
        
        if $match(packageName,"https?\:\/\/.*") {
            // installing directly from GitHub repo
            // FIXME - check github assumptions
            set url = packageName _ "/tarball/master/"
            $$$UrlParser(url,url)
            #dim response As %Net.HttpResponse = $$$CpmRegistry.Get(.url)

            set package  = ##class(%Stream.FileBinary).%New()
            set fileName = "temp.tgz" ; ##class(%Library.File).GetFilename(url)
            set package.Filename = $$$UtilMakePath($$$CpmConfig.tempdir, fileName)
        } else {
            #dim tag As %String = $piece(packageName, "@", 2)
            set:tag="" tag="latest"
            set packageName = $piece(packageName,"@")
            if '##class(CPM.Registry.Package).%ExistsId(packageName) {
                quit $$$NULLOREF
            }
            set url = $$$CpmConfig.registry_"/"_packageName_"/"_tag

            $$$UrlParser(url,url)
            #dim response As %Net.HttpResponse = $$$CpmRegistry.Get(.url)

            #dim data As %ZEN.proxyObject
            set tSC=##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(response.Data,,.data,1)
            $$$ThrowOnError(tSC)
            
            set destUrl = data.dist.tarball
            set destSha = data.dist.shasum
            
            set response = $$$CpmRegistry.Get(destUrl)
            set package  = ##class(%Stream.FileBinary).%New()
            set fileName = ##class(%Library.File).GetFilename(destUrl) ; "test.tgz"
            set package.Filename = $$$UtilMakePath($$$CpmConfig.tempdir, fileName)
        }
        do package.CopyFromAndSave(response.Data)
        kill response
        set o = $classmethod($$$PpvExtensions("TGZ"), "%New")
        if $isobject(o) {
            do o.Open(package.Filename)
        }
    }

    quit o
]]></Implementation>
</Method>

<Method name="Open">
<FormalSpec>fileName:%String</FormalSpec>
</Method>

<Method name="Unpack">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit '$$$OK
]]></Implementation>
</Method>

<Method name="Parse">
<ReturnType>CPM.IPackage</ReturnType>
<Implementation><![CDATA[    quit $$$NULLOREF
]]></Implementation>
</Method>

<Method name="Install">
<FormalSpec>package:CPM.IPackage</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit '$$$OK
]]></Implementation>
</Method>

<Method name="ForEachSuccessor">
<ClassMethod>1</ClassMethod>
<FormalSpec>methodName:%String,Args...:%Library.List</FormalSpec>
<Implementation><![CDATA[
    #dim rs As %ResultSet.SQL = ##class(%ResultSet.SQL).%Prepare("select *from %Dictionary.ClassDefinition where Super['"_$CLASSNAME()_"'")
    while rs.%Next() {
        do $classmethod(rs.Name, methodName, .Args)
    }
]]></Implementation>
</Method>
</Class>
</Export>
