<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="CPM.SourceType.IBase">
<IncludeCode>%occConstant,CPM.SourceTypes</IncludeCode>
<Super>%Library.RegisteredObject</Super>
<TimeCreated>63577,81983.079145</TimeCreated>

<Parameter name="EXTENSIONS">
<Description>
will be overriden in the successor</Description>
<Type>%String</Type>
</Parameter>

<Parameter name="MANIFEST">
<Description>
will be overriden in the successor</Description>
<Type>%String</Type>
</Parameter>

<Property name="FileName">
<Type>%String</Type>
</Property>

<Property name="IsPacked">
<Type>%Boolean</Type>
<Calculated>1</Calculated>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="PackageContent">
<Type>%ArrayOfDataTypes</Type>
</Property>

<Method name="UnregisterExts">
<Description>
 cleanup process private variables used for .ext and manifest registration</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    kill $$$PPV0EXTENSIONS
    kill $$$PPV0MANIFESTS
]]></Implementation>
</Method>

<Method name="RegisterExts">
<Description>
register class extension and manifest name</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Args...</FormalSpec>
<Implementation><![CDATA[
    #dim ext As %String
    // 1. register package extensions
    for i=1:1:$length(..#EXTENSIONS, ",") {
        set ext = $piece(..#EXTENSIONS, ",", i)
        set $$$PPV0EXTENSIONS(ext) = $CLASSNAME($this)
    }

    // 2. register manifest names
    for i=1:1:$length(..#MANIFEST, ",") {
        set ext = $piece(..#MANIFEST, ",", i)
        set $$$PPV0MANIFESTS(ext) = $CLASSNAME($this)
    }
]]></Implementation>
</Method>

<Method name="%OpenContainer">
<ClassMethod>1</ClassMethod>
<FormalSpec>fileName:%String</FormalSpec>
<ReturnType>CPM.SourceType.IBase</ReturnType>
<Implementation><![CDATA[
    #dim ext As %String = $zcvt($piece(fileName,".",*), "U")
    #dim o As CPM.SourceType.IBase = $$$NULLOREF
    
    if $d($$$PPV0EXTENSIONS(ext)) {
        set o = $classmethod($$$PPV0EXTENSIONS(ext), "%New")
        if $isobject(o) {
            do o.Open(fileName)
        }
    }
    quit o
]]></Implementation>
</Method>

<Method name="Open">
<FormalSpec>fileName:%String</FormalSpec>
</Method>

<Method name="Unpack">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    quit '$$$OK
]]></Implementation>
</Method>

<Method name="Parse">
<ReturnType>CPM.IPackage</ReturnType>
<Implementation><![CDATA[    quit $$$NULLOREF
]]></Implementation>
</Method>

<Method name="ForEachSuccessor">
<ClassMethod>1</ClassMethod>
<FormalSpec>methodName:%String,Args...:%Library.List</FormalSpec>
<Implementation><![CDATA[
    #dim rs As %ResultSet.SQL = ##class(%ResultSet.SQL).%Prepare("select *from %Dictionary.ClassDefinition where Super['"_$CLASSNAME()_"'")
    while rs.%Next() {
        do $classmethod(rs.Name, methodName, .Args)
    }
]]></Implementation>
</Method>
</Class>
</Export>
