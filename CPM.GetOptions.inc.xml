<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Routine name="CPM.GetOptions" type="INC"><![CDATA[
/// given single command-line extract 1st verb as command and all the rest
/// as arguments array
ExtractArgs(&line,&command,&args) {
    #dim pattern As %String = ##class(%Regex.Matcher).%New("\""([^\""]+)\""|[^ ]+")

    set line    = $zstrip(line,"<>WC")
    set command = $piece(line," ")
    set line    = $piece(line," ",2,*)

    kill args
    set args = 0
    set pattern.Text = line
    while pattern.Locate() {
        set argument = pattern.Group
        set args($increment(args)) = $zstrip(argument, "<>", """")
    }
}

#define OptionBoolean 1
#define OptionString 2
/// parse options from args array according format specifications from dmtDest
/// each option specification is preceeding destination variable (passed by reference)
///
/// GetOptions(.args,"-o",.option,"/verbose|/v",.verbose,"/include:",.include)
GetOptions(&args,&fmtDest...) public {
    #dim known ; known options

    // 1. scan options
    for i=1:2:$get(fmtDest) {
        #dim opts As %String = $get(fmtDest(i))
        continue:opts=""
        for j=1:1:$length(opts,"|") {
            #dim opt As %String = $zstrip($piece(opts,"|",j), "<>", "-/")
            #dim lastC As %String = $e(opt,*)
            #dim optType As %Integer = $case(lastC, ":":$$$OptionString, :$$$OptionBoolean)
            set opt = $zstrip(opt,"<>",":")
            
            set known(opt) = $lb(optType, i + 1) ; remember option type and destination argument pointer
        }
    }
    
    #dim argsN = "" ; new args without processed known options
    // 2. process passed args while creating new modified args (without known /options)
    for i=1:1:$get(args) {
        #dim arg As %String = $get(args(i))
        #dim isOption As %Boolean = $case($extract(arg,1),"/":1, "-":1, :0)

        if isOption {
            #dim option As %String = $zstrip(arg, "<>", "-/:")
            #dim optInfo = $get(known(option))

            if option = "help" {
                // special case - processed separately
                do ShowOptionsHelp(.fmtDest)
                return 0
            }
            if $length(optInfo)>0 {
                #dim type As %Integer = $li(optInfo,1)
                #dim index As %Integer = $li(optInfo,2)
                if type=$$$OptionBoolean {
                    set fmtDest(index) = 1
                } else {
                    set fmtDest(index) = $get(args($i(i)))
                }
            } else {
                return i ; unknown /option - bails out
            }
        } else {
            set argsN($i(argsN)) = arg
        }
    }
    // 3. save not consumed arguments back to args array
    if $get(argsN)<$get(args) {
        kill args merge args = argsN
    }
    quit $$$OK
}

ShowOptionsHelp(&fmtDest) {
    for i=1:2:$get(fmtDest) {
        #dim opts As %String = $get(fmtDest(i))
        continue:opts=""
        #if 0
        for j=1:1:$length(opts,"|") {
            #dim opt As %String = $zstrip($piece(opts,"|",j), "<>", "-/")
            #dim lastC As %String = $e(opt,*)
            #dim optType As %Integer = $case(lastC, ":":$$$OptionString, :$$$OptionBoolean)
            set opt = $zstrip(opt,"<>",":")
            
            //set known(opt) = $lb(optType, i + 1) ; remember option type and destination argument pointer
            write opt, ?8,!
        }
        #else
        write !,opts
        #endif
    }
}
PopArrValue(&args)
{
    #dim value 
    #dim key As %String = $order(args(""),1,value)
    quit:key=""
    if $data(args(key)) {
        kill args(key)
        return value
    }
    return ""
}

]]></Routine>
</Export>
