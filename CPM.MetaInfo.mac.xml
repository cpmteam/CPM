<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Routine name="CPM.MetaInfo" type="MAC" languagemode="0"><![CDATA[
#include CPM.License

/// dump only dependencies
DumpDeps(FileName) [xmltree] public {
    new xmltree
    do ArrayFromXml(FileName,$name(xmltree))
    #dim i As %String
    #dim pkg, deps
    merge pkg  = xmltree("Manifest",1,"Package")
    merge deps = xmltree("Manifest",2,"Dependencies")

    write pkg("Name"),":",!

    set i=$order(deps(""))
    while i'="" {
        write ?4, deps(i,"Dependency","Name"), ?20,
              $get(deps(i,"Dependency","Version"),$get(deps(i,"Dependency","Path"))),
              !
        set i=$order(deps(i))
    }
    //zw xmltree
}

Dump(FileName) public {
    // TODO - convert XML to multidimensional array, then use it elsewhere
    #dim XmlParser As %XML.TextReader
    do ##class(%XML.TextReader).ParseFile(FileName,.XmlParser)
    while XmlParser.Read() {
        write XmlParser.NodeType, ?20, XmlParser.Name, ?32, XmlParser.Value,!
        for i=1:1:XmlParser.AttributeCount {
            do XmlParser.MoveToAttributeIndex(i)
            write ?8, XmlParser.NodeType, ?20, XmlParser.Name, ?32, XmlParser.Value,!
        }
    }
}

#include CPM.DataTypes

 /*
    <Manifest>
    <Package Name="CPM-Installer-Sample" Version = "0.5.0" 
         License="MIT" Path="https://github.com/intersystems/monlbl-viewer.git" />
    <Dependencies>
    <Dependency Name="async" Version=">= 0.2.10"/>
    <Dependency Name="language-cos" Path="https://github.com/UGroup/atom-language-cos.git"/>
    </Dependencies>
    </Manifest>

 get loaded as local array
    
    %xmltree("Manifest")=2
    %xmltree("Manifest",1,"Package","License")="MIT"
    %xmltree("Manifest",1,"Package","Name")="CPM-Installer-Sample"
    %xmltree("Manifest",1,"Package","Path")="https://github.com/intersystems/monlbl-
    viewer.git"
    %xmltree("Manifest",1,"Package","Version")="0.5.0"
    %xmltree("Manifest",2,"Dependencies")=3
    %xmltree("Manifest",2,"Dependencies",1,"Dependency","Name")="async"
    %xmltree("Manifest",2,"Dependencies",1,"Dependency","Version")=">= 0.2.10"
    %xmltree("Manifest",2,"Dependencies",3,"Dependency","Name")="language-cos"
    %xmltree("Manifest",2,"Dependencies",3,"Dependency","Path")="https://github.com/UGroup/atom-language-cos.git"
*/

#; Load metainfo from given XML file into "local name"
#; this name could be local, process private or global name
ArrayFromXml(FileName,LocalName) public {
    #dim xreader As %XML.TextReader
    do ##class(%XML.TextReader).ParseFile(FileName,.xreader)

    #dim modeStack As %ArrayOfDataTypes
    #dim arrayMode As %Boolean
    $$$INITSTACK(modeStack)

    while xreader.Read() {
        // opening tag e.g. <Package>
        if xreader.NodeType = "element" {
            // push tag
            set arrayMode =  $$$TOPSTACK(modeStack)
            if (arrayMode) {
                set LocalName = $name(@LocalName@($increment(@LocalName),xreader.Name))
            } else {
                set LocalName = $name(@LocalName@(xreader.Name))
            }
            // we are switching to "array mode" if there is no
            // single attribute in the current tag 
            set arrayMode = '(xreader.AttributeCount > 0)
            $$$PUSHVALUE(modeStack,arrayMode)
            if arrayMode {
                set @LocalName = 0
            }
        }
        // closing tag e.g. </Package>
        elseif xreader.NodeType = "endelement" {
            // pop last tag
            // FIXME -make sure that the last popped subscript is the same as in xreader.Name
            $$$POPVALUE(modeStack)
            set arrayMode =  $$$TOPSTACK(modeStack)
            set LocalName = $name(@LocalName,$qlength(LocalName) - (arrayMode + 1))
        }
        // xml tag attributes e.g. <Package Name="CPM-Installer-Sample" Version = "0.5.0" />
        for i=1:1:xreader.AttributeCount {
            do xreader.MoveToAttributeIndex(i)
            set @LocalName@(xreader.Name) = xreader.Value
        }
    }
    //zw @LocalName
}
]]></Routine>
</Export>
